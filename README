![](https://github.com/JohnGrubbs07/2023_3C_SC-304_HE_K_G5/blob/main/Captura%20de%20pantalla%202023-12-12%20a%20la(s)%2021.19.35.jpg)

























Este proyecto se va a basar de un tren que pasa por estaciones de las diferentes provincias de costa rica, esto va a funcionar por medio de estructura de base de datos, utilizaremos lo que seria Pilas, Colas, Listas Circulares Dobles.

Menu: El menu trae lo que serian las opciones: 1-Agregar Pasajeros 2-Info de paradas 3-Informes generales 4-Cargar Pasajeros de Archivo 5-Salir

Opcion 1: Al entrar en esta opcion el sistema le pedira al usuario usuario primeramente el nombre completo, luego le pedira la edad, luego pedira en que estacion va a partir, luego le pregutara a que estacion va a ir y ya al final le preguntara si tiene alguna discapacidad.

Al poner todo esto el sistema por medio de unos ifs va a separar a los pasajeros dependiendo de 2 cosas: "Lugar de salida y Discapacidad", al obtener estos resultados va a separar en filas para entrar al vagon cuando llegue. Cada estacion tiene dos filas, una para discapacitados y otra para los demas. Al llegar el vagon llamara un metodo de vagon que primero revisa si hay personas que se bajan ahi y si si las baja y luego monta a las personas que estan en la fila solo si hay campo en el vagon.

El sistema en todo momento enseña en la consola la informacion de la estacion en a que esta, tambien las personas en la fila y enseñara las personas que se bajan del vagon.

Opciones 2: Esta opcion es una simple opcion de de cargar pasajeros de un archivo csv

Opcion3: Esta opcion es para salir del programa

Clase Vagon, Explicacion de metodos utilizados:

inicializarDatos(): Este método inicializa los datos necesarios para la simulación del sistema de transporte. Lee información desde el archivo "ini.ini" y establece las conexiones entre las estaciones en el grafo. Además, inicializa la
estructura de datos para representar los vagones y sus filas

hacerFila(String nombre, String edad, boolean discapacidad, int estacionOrigenConsulta, int estacionDestinoConsulta): Crea una fila de pasajeros basada en la información proporcionada, como nombre, edad, discapacidad, estación de origen y estación de destino. Luego, coloca a la persona enla cola correspondiente según su discapacidad y estación de origen.

montarPasajerosDisca(Cola colaDiscapacitados): Este método simula el proceso de montaje de pasajeros con discapacidad en los vagones. Recorre los vagones, identifica las filas correspondientes y coloca los pasajeros de la cola de discapacitados en las filas adecuadas.

montarPasajerosNorm(Cola colaNorm): Similar al método anterior, pero se encarga del montaje de pasajeros normales en las filas correspondientes de los vagones

bajarPasajeros(String estacion): Este método simula el proceso de bajada de pasajeros en una estación específica. Recorre los vagones, identifica las filas correspondientes y retira a los pasajeros que tienen la estación de destino igual a la estación proporcionada.

Lectura de datos desde un archivo CSV: Se utiliza la clase BufferedReader para leer un archivo CSV llamado "agregar.csv". Se divide cada línea del archivo en datos separados por comas y se almacenan en variables como nombre, edad, estación de origen, estación de destino, discapacidad y cantidad de personas.La función agregarFilaCvs se llama para agregar filas de pasajeros al sistema según la información leída desde el archivo CSV.

Se utilizan estructuras de datos como pilas (NodoPila), colas (NodoCola), y listas circulares (Circulo y Vagon) para gestionar la información de los pasajeros en diferentes estaciones. Se implementan operaciones como apilar, atender, getSiguiente, etc., para manipular estas estructuras.

Recorrido de estaciones: La función run parece estar simulando el movimiento del tren entre diferentes estaciones. Se utilizan instrucciones switch para identificar la estación actual y realizar operaciones específicas para cada estación, como bajar y subir pasajeros.

Actualización de la interfaz gráfica:

Al parecer, estás actualizando una interfaz gráfica (n.ver.setText(respuestaTot)) con información sobre los pasajeros en cada estación.

Clase Pila, Explicacion de Metodos
La clase Pila implementa una pila en Java y parece estar diseñada para manejar dos tipos de pilas, una para personas con discapacidad y otra para personas sin discapacidad.

Constructor: Inicializa la cima de la pila como null al crear una nueva instancia de la clase.

esVacia: Retorna true si la pila está vacía (cima es null), de lo contrario, retorna false.

esLlenaNorm: Recalcula el conteo de elementos en la pila y verifica si la cantidad de elementos normales supera la cantidad especificada.

esLlenaDisca: Recalcula el conteo de elementos en la pila y verifica si la cantidad de elementos con discapacidad supera la cantidad especificada.

conteoPila: Recalcula el conteo de elementos normales y con discapacidad en la pila.

apilar: Agrega un nuevo elemento a la pila, verificando si la pila está vacía o si se supera la cantidad especificada.

desapilar: Elimina el elemento en la cima de la pila si la pila no está vacía.

imprimirPila: Retorna una cadena que representa los elementos en la pila o un mensaje indicando que la pila está vacía.
